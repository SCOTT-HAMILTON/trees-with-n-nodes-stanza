defpackage tree/tests :
   import core
   import tree
   import tree/utils
   import utils
   import heap-augmented

public defn test-trees () :
    println("test tree 1")
    let :
        var tree = Tree("R")
        var t1 = Tree("1")
        add-child(t1, "2")
        add-child(t1, "3")
        add-child(tree, t1)
        add-child(tree, "4")
        add-child(tree, "5")
        println("Tree: %_\n" % [ tree ])

    println("\ntest tree 2")
    let :
        var tree = Tree("R")
        var t1 = Tree("R")
        add-child(t1, "1")
        var t2 = Tree("R")
        add-child(t2, "1")
        var t3 = Tree("R")
        add-child(t3, t1)
        add-child(t3, t2)
        add-child(tree, t3)
        println("Tree: %_\n" % [ tree ])

    println("\ntest make-tree")
    let :
        var tree = make-tree(4)
        println("Tree: %_" % [ tree ])

    println("\ntest tree notation")
    let :
        var tree =
        tr("R")
            - (tr("R")
                - (tr("R") - tr("1"))
                - (tr("R")
                    - tr("1")
                    - tr("2")
                  )
              )
        println("Tree: %_" % [ tree ])
    
    println("\ntest apply-child-possibility")
    let :
        val order = [
            (tr("R") - tr("1") - tr("2"))
            (tr("R") - (tr("R") - tr("2") - tr("3")))
            (tr("R") - tr("1") - tr("2") - tr("3"))
        ]
        println("result: %_" % [apply-child-possibility(order)])

    println("\ntest apply-repartition")
    let : 
        val repartitions = List(1, 2, 2)
        for p in repartitions apply-repartition :
            println("P: %_" % [p])

    println("\ntest set-child")
    let :
        val child = tr("R") - (tr("R") - tr("1") - tr("2")) - tr("1")
        println("child: %_" % [child])
        val tree = tr("R") - (tr("R") - tr("1")) - (tr("R") - tr("1")) - (tr("R") - tr("1"))
        println("tree b: %_" % [tree])
        set-child(tree, 0, child)
        println("tree a: %_" % [tree])

    println("\ntest set-child with dup and deep-copy")
    let :
        val tree = tr("A")
                    - tr("B")
                    - (tr("C") - tr("D") - tr("E"))
        println("Internal Tree Before: %_" % [tree])
        
        val tmp-tree = deep-copy(tree)
        set-child(tmp-tree, List(1L), tr("C-L") - tr("1") - tr("2"))
        println("Internal Tree After: %_" % [tree])
        println("Set-Child Tree: %_" % [tmp-tree])
    println("\ntest add-deep-child")
    let :
        val tree = tr("A")
                    - tr("B")
                    - (tr("C") - tr("D") - tr("E"))

        add-deep-child(tree, List(1L, 0L), "%")
        add-deep-child(tree, List(1L, 0L), "%1")
        println("Tree: %_" % [tree])
    println("\ntest internal-tree-to-final-trees")
    let :
        val tree = tr("A")
                    - tr("B")
                    - (tr("C") - tr("D") - tr("E"))
        println("Internal Tree: %_" % [tree])
        var counter = 0
        for t in internal-tree-to-final-trees(tree, 5) do :
            println("T: %_" % [t])
            counter = counter + 1
        println("Counter: %_" % [counter])

public defn test-utils () :
    println("test repart")
    let :
        for r in repart(7, 7) do :
            println("%_" % [r])

    println("\ntest all-combinations")
    let :
        val list-set: List<List<List<String>>> = List(
            List(List("A1")),
            List(List("A2", "A2"),
                 List("A2", "B2"),
                 List("B2", "B2")),
            List(List("A3"),
                 List("B3"),
                 List("C3"))
        )
        for c in list-set all-combinations :
            println("%_" % [c])
    println("\ntest combinations-with-replacement")
    let :
        for c in List("A", "B", "C") combinations-with-replacement<String>(2) :
            println("%_" % [c])

    println("\ntest heap-augmented")
    let :
        val a = to-list([ 0, 1, 2, 2, 3])
        for p in a heap-augmented :
            println(p)

    println("\ntest repart-unordered")
    let :
        for ru in repart-unordered(4, 4) do :
            println("ru=%_" % [ru])
