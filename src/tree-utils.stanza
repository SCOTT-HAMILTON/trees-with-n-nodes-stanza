defpackage tree/utils :
   import core
   import collections
   import tree
   import utils

public defn make-tree (N: Int) -> Tree<String> :
    var tree = Tree("R", false, N)
    for i in 0 to N do :
        add-child(tree, to-string(i + 1))
    tree

public defn tr (value: String) -> Tree<String> :
    Tree(value)

public defn minus (t1: Tree<String>, t2: Tree<String>) -> Tree<String>:
    var tree = deep-copy(t1)
    add-child(tree, t2)
    tree

public defn apply-child-possibility (
        order: Seqable<Tree<String>> & Lengthable) ->  Tree<String>:
    val tree = Tree("R", false, length(order))
    for c in order do :
        add-child(tree, deep-copy(c))
    tree

public defn apply-repartition (repartitions: List<Int>, max-root-children: Int|False) :
    val groups-ps = Vector<List<List<Tree<String>>>>()
    val indexed-reparts = zip(0 to length(repartitions), repartitions)
    val g-reparts-table = group-by({_[1]}, indexed-reparts)
    defn group-compare-min-index (g1: List<[Int, Int]>, g2: List<[Int, Int]>) : 
        defn g-min-index (g: List<[Int, Int]>) :
            minimum({_[0]}, g)
        g-min-index(g1) < g-min-index(g2)
    val tmp-groups: Array<List<[Int, Int]>> = to-array<List<[Int, Int]>>(values(g-reparts-table))
    qsort!(tmp-groups, group-compare-min-index)
    val groups: List<List<Int>> = map(fn (g) : map({_[1]}, g), to-list(tmp-groups))
    for g in groups do :
        val r = g[0]
        val group-c-ps = if r == 0 :
            to-array<Tree<String>>([ make-tree(0) ])
        else :
            to-array<Tree<String>>(trees-with-n-nodes(r + 1, max-root-children))
        val ps: List<List<Tree<String>>> = to-list(combinations-with-replacement(group-c-ps, length(g)))
        add(groups-ps, ps)

    generate<Tree<String>> :
        for combination in to-list(groups-ps) all-combinations :
            val childs = to-list(lazy-flatten(combination))
            yield(apply-child-possibility(childs))

public defn apply-repartition (max-root-children: Int|False) :
    fn (f: Tree<String> -> False, repartitions: List<Int>) :
        val seq = apply-repartition(repartitions, max-root-children)
        while not empty?(seq) :
              f(next(seq))

public defn trees-with-n-nodes (N: Int, max-root-children: Int|False) :
    generate<Tree<String>> :
        if N == 1:
            yield(tr("R"))
            break()
        val start-opti   = true
        val recurse-opti = true
        val start = if start-opti :
            match(max-root-children) :
                (_:False) : N
                (s:Int) :
                    if s >= 1 and s <= N :
                        s
                    else :
                        N
        else :
            N
        for root-childs in in-reverse(1 to start) do :
            val tree = make-tree(root-childs)
            val left = N - root-childs - 1
            if left == 0 :
                yield(tree)
            else if left == 1 :
                set-child(tree, root-childs - 1, make-tree(1))
                yield(tree)
            else if left > 1 :
                val repartitions = repart(left, root-childs)
                for repartition in repartitions do :
                    val m = if recurse-opti :
                        match(max-root-children) :
                            (_:False) : max-root-children
                            (max-rc:Int) : max(1, max-rc - root-childs + 1)
                    else :
                        false
                    for t in repartition apply-repartition(m):
                        yield(t)
    
public defn trees-with-n-nodes (N: Int) :
    trees-with-n-nodes(N, false)

public defn trees-with-n-nodes (f: Tree<String> -> False, N: Int) :
    val seq = trees-with-n-nodes(N)
    while not empty?(seq) :
          f(next(seq))

public defn group-by-siblingness<?T> (node-list: List<Tree<?T>>) -> Seqable<List<Tree<T>>> :
    defn parent-a-u-p (t1: Tree<T>) -> String :
        ; println("Parent-a-u-p of: %_" % [t1])
        to-string $ to-list $ (match(parent(t1)) :
            (_:False) : to-seq(List(-1L)) as Seq<Long>
            (p:Tree<T>) : ascendant-unique-path(p))
        ; println("%_" % [value])
        ; value
    values(group-by(parent-a-u-p, node-list))

public defn all-nodes-if<?T> (predicate?: Tree<T> -> True|False,
                       tree: Tree<?T>) -> List<Tree<T>> :
    val result = Vector<Tree<T>>(length(children(tree)))
    if predicate?(tree) :
        add(result, tree)
    for child in children(tree) do :
        if predicate?(child) == 0 :
            add(result, child)
        else :
            add-all(result, all-nodes-if(predicate?, child))
    to-list(result)

public defn non-leaf-nodes<?T> (tree: Tree<?T>) -> List<Tree<T>> :
    all-nodes-if({length(children(_)) != 0}, tree)

public defn leaf-nodes<?T> (tree: Tree<?T>) -> List<Tree<T>> :
    all-nodes-if({length(children(_)) == 0}, tree)

defn apply-groups-left<?T> (groups: List<List<?T>>, repartitions: List<List<Int>>)
    -> List<List<List<List<Int>>>>:
    ; to-list(map({apply-group-left(_[0], _[1])}, zip(groups, repartition)))
    val result = Vector<List<List<List<Int>>>>(length(repartitions))
    for rep in repartitions do:
        defn apply-group-left (args: [List<T>, Int]) -> List<List<Int>> :
            repart(args[1] as Int, length(args[0] as List<T>))
        add(result,
            map(apply-group-left, to-list $ zip(groups, rep)))
    to-list(result)

defn groups-to-c-a-l (
                groups: List<List<List<Long>>>,
                groups-reparts: List<List<Int>>):
    val results = Vector<List<[Int, List<Long>]>>()
    for (l in apply-groups-left(groups, groups-reparts), r in groups-reparts) do :
        defn combination-to-action-list (c) -> List<[Int, List<Long>]> :
            defn zip-groups-repart-with-trees (
                    groups-reparts: List<List<Int>>,
                    groups: List<List<List<Long>>>) -> List<List<[Int, List<Long>]>> :
                defn zip-group-repart-with-trees (
                    group-reparts: List<Int>,
                    group: List<List<Long>>) :
                    to-list(zip(group-reparts, group))
                map{
                    fn (args: [List<Int>, List<List<Long>>]) :
                        zip-group-repart-with-trees(
                            args[0] as List<Int>,
                            args[1] as List<List<Long>>)
                  , _} $ to-list $ zip(groups-reparts, groups)
            to-list $
                filter{fn (args) : args[0] != 0, _} $
                lazy-flatten $
                zip-groups-repart-with-trees(c, groups)
        ; println("groups: %_, groups-reparts: %_" % [groups, groups-reparts])
        ; println("l: %_" % [l])
        if length(groups) > 0 :
            add-all(results,
                map(combination-to-action-list, to-list $ all-combinations $ l))
    to-list(results)

defn print-groups<?T> (groups: List<List<?T>>) :
    for group in groups do :
        println("Goup: ")
        for item in group do :
            println("%_" % [item])

public defn internal-tree-to-final-trees (internal-tree: Tree<String>, M: Int) :
    generate<Tree<String>> :
        if degree(internal-tree) == 0 :
            yield $ make-tree $ M
        else :
            ; Very important because child-id's aren't garanteed to be right before that call
            update-children(internal-tree)
            val non-leaf-nodes = non-leaf-nodes(internal-tree)
            val leaf-nodes = leaf-nodes(internal-tree)
            if length(leaf-nodes) > M :
                println("BAIT")
                ; println("BAIT: %_" % [internal-tree])
                break()
            if length(leaf-nodes) == 0 :
                println("[ERROR:internal-tree-to-final-trees] there can't be no leaf nodes")
                break()
            ; println("internal-tree: %_" % [internal-tree])
            ; println("leaf-nodes:")
            ; for n in leaf-nodes do :
            ;     println("leaf-node = %_" % [n])
            ;     println("leaf-node's AUP %_" % [to-list $ ascendant-unique-path $ n])
            ; println("non-leaf-nodes:")
            ; for n in non-leaf-nodes do :
            ;     println("non-leaf-node = %_" % [n])
            ;     println("non-leaf-node's AUP %_" % [to-list $ ascendant-unique-path $ n])
            val min-nodes = length(leaf-nodes)
            val left = M - min-nodes
            if left < 0: 
                ; Guarded by the length(leaf-nodes) <= M assert
                fatal("Unreachable")
            ; println("min-nodes=%_, left=%_" % [min-nodes, left])
            defn aup-and-groupby (nodes-list: List<Tree<String>>) -> List<List<List<Long>>> :
                map{ fn (g): map{
                            fn (t: Tree<String>) : to-list $ ascendant-unique-path(t), _
                        } $ g, _
                    } $ to-list $ group-by-siblingness $ nodes-list
            ; println("Leaf Nodes: %_" % [leaf-nodes])
            val leaf-node-groups = aup-and-groupby $ leaf-nodes
            val non-leaf-node-groups = aup-and-groupby $ non-leaf-nodes
            ; println("%_" % [leaf-node-groups])
            ; println("%_" % [non-leaf-node-groups])
            ; println("Non Leaf Nodes: ")
            ; print-groups(non-leaf-node-groups)
            ; println("Leaf Nodes: ")
            ; print-groups(leaf-node-groups)
            
            for r in repart-unordered(left, 2) do:
                val left-nlngs = r[0] ; Order doesn't mater
                val left-lngs = r[1]
                defn groups-reparts<?T> (groups: List<List<?T>>, left: Int) -> List<List<Int>> :
                    if left > 0 :
                        to-list(repart-unordered(left, length(groups)))
                    else :
                        List(to-list(Array<Int>(length(groups), 0)))
                val nlngs-reparts = groups-reparts(non-leaf-node-groups, left-nlngs)
                val lngs-reparts = groups-reparts(leaf-node-groups, left-lngs)
                ; println("left-non-leaf=%_, left-leaf=%_" % [left-nlngs, left-lngs])
                ; println("non-leaf-reparts: %_" % [nlngs-reparts])
                ; println("leaf-reparts: %_" % [lngs-reparts])
                ; println("\nRESULTS leaf nodes: ")
                ; println("\tALL - COMBINATIONS: ")
                val ln-a-l = groups-to-c-a-l(leaf-node-groups, lngs-reparts)
                val nln-a-l = groups-to-c-a-l(non-leaf-node-groups, nlngs-reparts)
                ; println("\t%_" % [ln-a-l])
                ; println("\nRESULTS non-leaf nodes: ")
                ; println("\tALL - COMBINATIONS: ")
                ; println("\t%_" % [nln-a-l])
                val minimum-tree = deep-copy(internal-tree)
                ; println("leaf-nodes")
                for node-dup in
                    map(fn (n) : to-list $ in-reverse $ ascendant-unique-path $ n, leaf-nodes) do :
                    ; println("leafnode: %_" % [node-dup])
                    add-deep-child(minimum-tree, node-dup, "1")
                ; println("min-tree: %_" % [minimum-tree])
                ; println("ln-a-l: %_, nln-a-l: %_" % [ln-a-l, nln-a-l])
                for c in List(ln-a-l, nln-a-l) all-combinations :
                    val C-A-L = to-list $ lazy-flatten $ c
                    ; println("C-A-L: %_" % [C-A-L])
                    val min-tree = deep-copy(minimum-tree)
                    ; Applying C-A-L
                    for al in C-A-L do:
                        for i in 0 to al[0] do :
                            add-deep-child(min-tree, to-list $ in-reverse $ al[1], to-string(i + 2))
                    yield(min-tree)

public defn trees-with-n-nodes-with-m-leaves (N: Int, M: Int) :
    generate<Tree<String>> :
        val internal-N = N - M
        for internal-tree in trees-with-n-nodes(internal-N, M + 1) do :
            ; println("Internal tree: %_" % [internal-tree])
            for final-tree in internal-tree-to-final-trees(internal-tree, M) do:
                yield(final-tree)
